pr -> program identifier block .
identifier -> letter'
letter' -> letter
letter' -> letter letter'
letter' -> letter digit'
digit' -> digit
digit' -> digit digit'
digit' -> digit letter'
block -> [ var_declaration_section ] compound_statement
var_declaration_section -> var ; var_declaration’
var_declaration’ -> var_declaration ;
var_declaration’ -> ‘’
var_declaration -> identifier identifier’ : type
identifier’ -> identifier identifier’
identifier’ -> ‘’
type -> Integer
type -> Boolean
compound_statement -> begin statement statement’
statement’ -> ; statement statement’
statement’ -> end
statement -> simple_statement
statement -> structured_statement
simple_statement -> assignment_statement
simple_statement -> read_statement
simple_statement -> write_statement
assignment_statement -> identifier := expression
read_statement -> read identifier
write_statement -> write identifier 
write_statement -> write_literal
structured_statement -> if_statement
structured_statement -> while_statement
structured_statement -> compound_statement
if_statement -> if boolean_expression then statement [ else statement ]
while_statement -> while boolean_expression do statement
expression -> arithmetic_expression 
expression -> boolean_expression
arithmetic_expression -> arithmetic_expression + term
arithmetic_expression -> arithmetic_expression - term
arithmetic_expression -> term
term -> term * factor
term -> factor
factor -> identifier
factor -> integer_literal
literal -> integer_literal
literal -> boolean_literal
integer_literal -> digit'
digit' -> digit
digit' -> digit digit'
boolean_literal -> true
boolean_literal -> false
boolean_expression -> boolean_literal
boolean_expression -> arithmetic_expression > arithmetic_expression
boolean_expression -> arithmetic_expression >= arithmetic_expression
boolean_expression -> arithmetic_expression = arithmetic_expression
boolean_expression -> arithmetic_expression <= arithmetic_expression
boolean_expression -> arithmetic_expression < arithmetic_expression