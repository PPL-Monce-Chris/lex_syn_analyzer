pr -> program i block .
block -> var_declaration_section compound_statement
block -> compound_statement
var_declaration_section ->  var var_declaration_section*
var_declaration_section* -> var_declaration
var_declaration_section* -> var_declaration ; var_declaration_section*
var_declaration -> var_declaration* : type
var_declaration* -> i
var_declaration* -> i var_declaration*
type -> Integer
type -> Boolean
compound_statement -> begin compound_statement* end
compound_statement* -> statement
compound_statement* -> statement ; compound_statement*
statement -> simple_statement
statement -> structured_statement
simple_statement -> assigned_statement
simple_statement -> read_statement
simple_statement -> write_statement
assigned_statement -> i := expression
read_statement -> read i
write_statement -> write i
write_statement -> write literal
structured_statement -> if_statement
structured_statement -> while_statement
structured_statement -> compound_statement
if_statement -> if boolean_expression then statement
if_statement -> if boolean_expression then statement else statement
while_statement -> while boolean_expression do statement
expression -> arithmetic_expression
expression -> boolean_expression
arithmetic_expression -> term
arithmetic_expression -> arithmetic_expression + term
arithmetic_expression -> arithmetic_expression - term
term -> factor
term -> term * factor
factor -> i
factor -> integer_literal
literal -> integer_literal
literal -> boolean_literal
digit* -> digit
digit* -> digit digit*
boolean_literal -> true
boolean_literal -> false
boolean_expression -> boolean_literal
boolean_expression -> boolean_literal
boolean_expression -> arithmetic_expression > arithmetic_expression
boolean_expression -> arithmetic_expression >= arithmetic_expression
boolean_expression -> arithmetic_expression = arithmetic_expression
boolean_expression -> arithmetic_expression <= arithmetic_expression
boolean_expression -> arithmetic_expression < arithmetic_expression